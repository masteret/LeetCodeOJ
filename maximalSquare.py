__author__ = 'ET'
import math
import timeit
import sys

class Solution:
    # @param {character[][]} matrix
    # @return {integer}
    def maximalSquare(self, matrix):
        result = 0
        for row_index, row in enumerate(matrix):
            for index, item in enumerate(row):
                if item == "1":
                    right_count = 0
                    for x in xrange(index, len(row)):
                        if row[x] == "1":
                            right_count += 1
                        else:
                            break

                    if right_count > result:
                        bottom_count = 0
                        bottom_right_count = 0
                        min_bottom_right_count = sys.maxint
                        for x in xrange(row_index, min(row_index + right_count, len(matrix))):
                            bottom_count += 1
                            bottom_right_count = 0
                            for i in xrange(index, min(len(row), index + right_count)):
                                if matrix[x][i] == "1":
                                    bottom_right_count += 1
                                else:
                                    break

                            min_bottom_right_count = min(min_bottom_right_count, bottom_right_count)
                            if min_bottom_right_count <= bottom_count:
                                break
                        result = max(result, min([bottom_count, min_bottom_right_count, right_count]))
                        # print [result], row_index, index, bottom_count, min_bottom_right_count, right_count
        # Check the min of bottom, right and bottom right

        return int(math.pow(result,2))


if __name__ == "__main__":
    puppy = Solution()
    # 4 1 1 4 9 16 9 4 64
    print puppy.maximalSquare(["10100","10111","11111","10010"])
    print puppy.maximalSquare(["1"])
    print puppy.maximalSquare(["10"])
    print puppy.maximalSquare(["1010","1011","1011","1111"])
    print puppy.maximalSquare(["0001","1101","1111","0111","0111"])
    print puppy.maximalSquare(["11111111","11111110","11111110","11111000","01111000"])
    print puppy.maximalSquare(["0010","1111","1111","1110","1100","1111","1110"])
    print puppy.maximalSquare(["010010000110011","000001101001001","000000100100000","000010111110011","010100110000011","000110111000111","111000101000100","010100111100001","010001011010011","000110010100010","111010011101000","000110110110110","001101010101100"])

    timed = False
    timed = True
    if timed:
        start = timeit.default_timer()
        print puppy.maximalSquare
        print timeit.default_timer() - start